#!/usr/bin/env perl

#############################################################################
#
# Perl script to build the TDR, cleanup, and so on.
#
# For help, type:
#
# > tdr help
#
# Created: Lucas Taylor 6 Jan 2005
# Revised: Lucas Taylor 7 Dec 2006 : Added support for mtcc
# Revised: George Alverson 9 Nov 2005
# Revised: Lucas Taylor 17 Jul 2006 : Added support for slhc-eoi
# Revised: Lucas Taylor 20 Jul 2006 : Added diffractive LoI
# Revised: Lucas Taylor 16 Oct 2006 : Added heavy ion TDR
# Revised: George Alverson 21 Dec 2006 : Modified to handle notes
#
#

#############################################################################


use Getopt::Long qw(:config require_order); # the require order means that for
# "tdr command -switch", -switch is passed in ARGV
use File::Basename; # access to directory, filename and extension of script
use File::Copy;
use File::Spec::Functions; # catfile
use File::Find;
use File::Temp qw/ tempfile tempdir /;
use File::Path;
use Cwd; # like Unix pwd but more portable
use Cwd 'abs_path';
use File::Glob 'bsd_glob';
use Text::Balanced qw (extract_bracketed);
use LWP::UserAgent; #for URL handling


#############################################################################
# Main:
#############################################################################

my $VERSION = sprintf "%6d", q$Revision: 304655 $ =~ /(\d+)/g;

my $verbose = '';
my $help = '';
my $style = 'tdr';
my $copyPdf = 0;
my $export = '';
my $draft = 1;
my $graphics = 1;
my $wrap = 0;
my $upload = '';
my $reload = '';
my $tmpclean = 1;
my $arxiv = 0;
my $preview = 0;
my $latex = 0;
my $preflight;
my $preprint = 0;
my $dataNotMC = 1;
my $cmsCernNo = '';
my $cmsCernDate = '\today';
my $message = '';
my $journal = 0;
my $apsStyle = '';
my $plbStyle = '';
my $epjcStyle = '';
my $jhepStyle = '';
my $npahaStyle = '';
my $appendix = '\\appendix';
my $hasappendix = '';
my $issupplement = 0;
GetOptions ('verbose!' => \$verbose, # negatable: --noverbose, turn on TeX screen output
            'help|?' => \$help, # echo basic operations and options
            'style=s' => \$style, # tdr/note/an/as/cr/in/paper
            'copyPdf=s' => \$copyPdf, # copy the pdf output back to the directory the tex was found in
            'export!' => \$export, # generate an exportable tarball
            'draft!' => \$draft, # indicate draft status
            'graphics!' => \$graphics, # indicates draft graphics option
            'wrap!' => \$wrap, # generate an archive of pdf+figures: currently only pas
            'arxiv!' => \$arxiv, # generate arxiv-specific tarball: currently only pas/paper
            'cernNo=s' => \$cmsCernNo, # CERN-generated preprint number (for papers only)
            'cernDate=s' => \$cmsCernDate, # date of issuance of CERN preprint number (format to be determined: try dd MMM YYYY, with MMM JAN, FEB...
            'message=s' => \$message, # message put after abstract: typically "Submitted to XXX"
            'preview!' => \$preview, # preview the upload to CDS: currently only pas,
            'upload!' => \$upload, # upload pdf+figures to CDS: currently only pas,
            'reload=i' => \$reload, # re-upload. needs id of originally uploaded doc.
            'clean!' => \$tmpclean, # clean tmp area of all files
            'latex!' => \$latex, # use LaTeX/dvipdf in preference to pdflatex
            'preflight' => \$preflight, # override --arxiv use of authorlist
            'preprint' => \$preprint, # Force preprint style for papers (official version not yet final),
            'data!' => \$dataNotMC, # for the Data/MC switch on PAS metadata: passed to makeManifest
            'aps=s' => \$apsStyle, # for APS journals
            'plb=s' => \$plbStyle, # for Elsevier journals
            'epjc=s' => \$epjcStyle, # for Springer Verlag journals (Europhysics C)
            'jhep=s' => \$jhepStyle, # for JHEP- minimal additional processing - does not yet count as a journal style
            'npaha=s' => \$npahaStyle, # for Nature Physics--no template available so minimal processing
            'appendix!' =>\$hasappendix, # document has an appendix - don't start authorlist with \appendix
            'supplement!' =>\$issupplement # document is a supplement - suppress abstract and full author list
            );

my $n_args = @ARGV; # number of elements in argument list, @ARGV

if ($help || substr($ARGV[0],0,1) eq 'h')
{
    &print_usage();
    exit;
}


# option post-processing
if ($reload) {$upload = 1;} # reload implies upload
if ($upload) { $wrap = $upload; } # upload implies wrap
#if ($preview) { $wrap = $preview; } # preview implies wrap
if ($style eq "as") { $style = 'pas';}
if ($style eq "paper") { $style = 'cmspaper'; }
if ($arxiv) {$draft = 0;}
$journal = $apsStyle || $plbStyle || $epjcStyle;
if ($hasappendix) {$appendix = ''}; # default is '\appendix'

if ($n_args == 0)
{ print "\n***** No arguments specified *****\n\n";
     die "For more details type> tdr help\n\n";
}
elsif ($n_args > 3)
{
    print "\n***** Too many arguments specified *****\n\n";
     die "For more details type> tdr help\n\n";
}

&init();

my $arg1 = $ARGV[0]; # array @ARGV contains input arguments
my $arg2 = $ARGV[1];
my $arg3 = $ARGV[2];

if ($arg1 eq "build" || $arg1 eq "b") { &build ( $arg2, $arg3 );}
elsif ($arg1 eq "clean" || $arg1 eq "c") { &clean ( );}
elsif ($arg1 eq "runtime" || $arg1 eq "r") { &runtime ( $arg2 );}
elsif ($arg1 eq "test") { &test ( $arg2 );}
elsif ($arg1 eq "veryclean" || $arg1 eq "v") { &veryclean ();}
else{ # Whatever arguments were typed, they don't make sense...
       print "\n ***** Invalid arguments ***** \n\n";
       die "For more details type> tdr help\n\n";
    }





#############################################################################
# Subroutines:
#############################################################################


#############################################################################
sub print_usage {
    print "******************************************************************************\n";
    print "* tdr (version $VERSION) *\n"; #reserve space for the full $VERSION expansion
    print "* *\n";
    print "* Builds TDRs and others such documents Lucas Taylor, 6 Jan 2005 *\n";
    print "* *\n";
    print "* Initialisation (once per session/new shell) *\n";
    print "* -------------- *\n";
    print "* > eval `tdr runtime -sh` // for Bourne-shell or Korn shell *\n";
    print "* > eval `tdr runtime -csh` // for c-shell or tc shell *\n";
    print "* *\n";
    print "* Usage: *\n";
    print "* ----- *\n";
    print "* > tdr [options] build target // process target.tex to produce pdf, etc. *\n";
    print "* *\n";
    print "* target = [ blank ] // builds user guide, use --style=note *\n";
    print "* Example targets: ctdr // Computing TDR *\n";
    print "* ptdr1|ptrd2 // Physics TDR Vol I|II *\n";
    print "* slhc-eoi // SLHC Expression of Interest *\n";
    print "* mtcc // Magnet test and Cosmic Challenge document *\n";
    print "* foo // builds any file foo.tex in current directory. *\n";
    print "* ----- *\n";
    print "* options: *\n";
    print "* --verbose: log messages from TeX *\n";
    print "* (default is --noverbose) *\n";
    print "* --style=: document style, one of tdr/note/an/pas/cr/in/paper *\n";
    print "* (default --style=tdr) *\n";
    print "* --copyPdf: copy the final pdf back to the document home directory. If --copyPdf=svn, copies with svn version. *\n";
    print "* (default false) *\n";
    print "* --export: create a copy of the entire target for export. *\n";
    print "* produces a compressed tarball under Unix. *\n";
    print "* (default --noexport) *\n";
    print "* --draft: mark the output as a draft version *\n";
    print "* (default --draft; override with --nodraft) *\n";
    print "* --graphics: include all graphics files as normal *\n";
    print "* (default --graphics; override with -nographics) *\n";
    print "* --clean: clean the tmp working area before execution *\n";
    print "* (default --clean; override with --noclean) *\n";
    print "* > tdr clean // deletes temporary output files *\n";
    print "* > tdr veryclean // normal clean and also emacs backups etc. *\n";
    print "* > tdr help // display this help *\n";
    print "* *\n";
    print "******************************************************************************\n";
    print "* PAS specific administrative options: *\n";
    print "* --wrap: produce an archive containing output pdf+copies of figs *\n";
    print "* in the output directory *\n";
    print "* (default --nowrap) *\n";
    print "* --preview: preview the upload to CDS (implies --wrap) *\n";
    print "* *\n";
    print "* --upload: upload the pdf+copies of figs to CDS (implies --wrap) *\n";
    print "* *\n";
    print "* --reload=: CDS document number to reupload (implies --upload) *\n";
    print "* *\n";
    print "******************************************************************************\n";
    print "* Paper specific administrative options: *\n";
    print "* --arxiv: produce an archive containing output pdf+copies of figs *\n";
    print "* (nodraft; arxiv specific processing inclusions, authorlist) *\n";
    print "* --preprint: CERN preprint style forced on top of paper style *\n";
    print "* --latex: use eps for graphics files *\n";
    print "* *\n";
    print "* --cernNo: CERN generated preprint number, e.g. 2010-003 *\n";
    print "* --cernDate: issuance date for preprint e.g. '05 Feb 2010' *\n";
    print "* --message: string placed after the abstract, typically *\n";
    print "* Submitted to XXX *\n";
    print "* --appendix=: document has appendices, do not start authorlist with appendix command *\n";
    print "* (default --no-appendix) *\n";
    print "* --supplement: document is a supplement, suppress abstract and full author list *\n";
    print "* *\n";
    print "*----------------------------------------------------------------------------*\n";
    print "* To post-process to standard journal styles: *\n";
    print "* --aps=: options for revtex4-style processing (= - for defaults) *\n";
    print "* reprint, prl, showpacs (showkeys, draft, preprint, prd) *\n";
    print "* --plb=: options for elsevier (plb)-style processing (= - for defaults) *\n";
    print "* 3p, twocolumn, times *\n";
    print "* --epjc=: options for Springer Verlag (Europhysics C) processing (= - for defaults) *\n";
    print "* twocolumn *\n";
    print "* --jhep=: options for JHEP processing (= - for defaults) [not really post-processing]*\n";
    print "* --npaha=: options for Nature Physics processing (= - for defaults) [not really post-processing]*\n";
    print "******************************************************************************\n";
}



#############################################################################
sub init {
#
# Define various input and output directories
#
    if ($^O eq "MSWin32") {
      $cur_dir = abs_path(cwd());
      $bin_dir = abs_path(dirname($0));
      $top_dir = $bin_dir;
      $gen_dir = $top_dir."/general";
      $tmp_dir = $top_dir."/tmp";
      }
    else {
      $cur_dir = &full_path(&cwd()); # Current directory
      $bin_dir = &full_path(dirname($0)); # Directory containing this script
      $top_dir = &full_path($bin_dir); # Top level of checkout area - this is where the script is
      $gen_dir = &full_path($top_dir."/general"); # Dir. of document skeleton/style
      $tmp_dir = &full_path($top_dir."/tmp"); # Dir. of temp output, dvi/PS files, etc.
      }
     $ENV{'TEXMFOUTPUT'} = $tmp_dir; # required as of TL2010 for bibtex, otherwise won't write in non-current working dir
}




#############################################################################
sub build {
#
# Build {$target}.tex
#
    if ($tmpclean) {&clean()};
#
# Take target in this order: (1) command line, (2) environment (3) hardwired default
#
    my $n_args = @ARGV; # number of elements in argument list, @ARGV

    $ps = ":"; # path separator symbol: this is now a global symbol
    $ds = "/"; # directory separator
    if ($^O eq "MSWin32") {$ps = ";"; $ds = "\\";} # use ; for Windows

    $target = $_[0] || $ENV{TDR_TARGET} || "notes_for_authors";
    substr($target,0,1) ne '-' or die "Options ($_[0]) must now go before the command. Sorry.\n";
    $target =~ s/\.tex$//;

    if ($style eq 'tdr' && $ENV{TDR_STYLE} ) {$style = $ENV{TDR_STYLE};} # allow overwriting with envvar if default

    my $texProgram = "pdflatex";
    if ($latex) {$texProgram = "latex";}
# Find the target tex file to be built
    my $target_tex = "$target".'.tex';

    # We search for a file of the same name starting from the current directory.
    # This does not work well under svn due to the directory structure for branches.
        my @dirs = ();
        find(sub {
            if ($_ =~ /^$target_tex$/) {
                push(@dirs,$File::Find::dir);
            }
        }, $cur_dir);
        my $nfound = @dirs;
        if ( $nfound != 1 )
        {
          # try restricting the search
          if ( $style =~ 'cmspaper' )
          {
            @dirs = grep (/papers/,@dirs);
          }
          else
          {
            # this only works if checked out in canonical fashion,
            # but it is currently only a fallback anyway
            @dirs = grep (/\/notes/,@dirs);
          }
          # regress
         $nfound = @dirs;
         if ( $nfound != 1 )
         {
          print "found no or too many ($nfound) matches for $target_tex starting from $cur_dir\n";
          map { print "$_\n" } @dirs;
          die "Please fix this.\n";
         }
        }
        $tex_dir = $dirs[0];



    $full_target_tex = "$tex_dir/$target_tex";
    print "\n",'Building: ',"$full_target_tex\n\n";
# die "End debug";

# Define PATH of places to find other tex files, figures, bibliography stuff
# For now, only look in a single tree (means e.g. CTDR pictures are not exposed to PTDR)
# Revisit this if it looks likely to be needed.


   $tex_path = join($ps,$tex_dir,"$tex_dir/tex","$cur_dir/tex");
   $fig_path = join($ps,"$tex_dir/fig","$tex_dir/../fig","$tex_dir/../../fig","$tex_dir/../../../fig");
   $common_path = join($ps,"$gen_dir","$tmp_dir","$cur_dir","$cur_dir/..");



# Define directories to be searched by LaTeX, including one where script was invoked
# Note that it will revert automatically to its original value when script completes

$ENV{TEXINPUTS} = join($ps,$tex_path,$fig_path,$common_path,$ENV{TEXINPUTS});
$ENV{TEXPSHEADERS} = $ENV{TEXINPUTS}; # This is required by \includegraphics when using pdftex

# Set up temporary area and create input LaTeX file (boilerplate + target file)

    -e $tmp_dir || mkdir ($tmp_dir,0755) || die "Failed to create temporary output directory";

    my $temp_stem = $target;
    if ($style =~ 'pas')
    {
        $temp_stem =~ s/_/\-/g; # convert underscores to dashes
    }
    $temp_stem = "$tmp_dir/$temp_stem".'_temp';
    $temp_tex = "$temp_stem".'.tex';

    unlink($temp_tex);
    my $stylestring = $style;
    if (!$graphics) {$stylestring .= ",draft"}; # this adds LaTeX draft option: not same as CMS draft option
    my $svnVersion = qx{svnversion --no-newline};
    if ($style eq 'cmspaper' && !$draft)
    {
      my $meta = '';
      if ($cmsCernNo && $cmsCernDate) { $meta = qq|\\def\\cmsCernNo{$cmsCernNo}\\def\\cmsCernDate{$cmsCernDate}|; }
      if ($message) {$meta .= qq|\\def\\cmsMessage{$message}|;}
      &myrep( "$gen_dir/skeleton_start.tex", "$temp_tex", ",tdr]{cms-tdr}", ",$stylestring]{cms-tdr}\n\\def\\svnVersion{$svnVersion}$meta" ) ;
    }
    else
    {
      &myrep( "$gen_dir/skeleton_start.tex", "$temp_tex", ",tdr]{cms-tdr}", ",$stylestring]{cms-tdr}\n\\def\\svnVersion{$svnVersion}" ) ;
    }
    if (!$draft)
    {
        # use final as the option to avoid a clash with the common LaTeX usage.
        &myrep("$temp_tex","$temp_tex","]{cms-tdr}",",final]{cms-tdr}");
    }
    if ($issupplement)
    {
        #
        &myrep("$temp_tex","$temp_tex","]{cms-tdr}",",supplement]{cms-tdr}");
    }

    if ($style eq 'tdr')
    {
        &myrep("$temp_tex","$temp_tex","\\\\begin{document}","\\begin{document}\n");
    }
    $authorfilename; # global
    if (($arxiv || ($style =~ 'cmspaper' && ! $draft)) && !$preflight)
    {
        # check status relative to repository: just types status on terminal
        print ">>>> Status relative to repository: \n";
        system("svn status --show-updates");
        if (!$issupplement) # could put this in outer if, but is nice to check status
        {
            # use collab option to include footnote to collaboration listing
            my $push_dir = getcwd();
            chdir ($tmp_dir);
            $authorfilename = &myCollab($temp_tex,'tex');
            chdir ($push_dir);
            if ($authorfilename)
            {
                if (!$journal)
                {
                    &myrep("$temp_tex","$temp_tex","]{cms-tdr}",",collab]{cms-tdr}");
                }
            }
            else
            {
                $arxiv = 0;
                print ">>> ArXiV export generation failed: no authorlist was retrieved! <<<\n";
            }
        }
    }
    my $contactAddress;
    if ($style =~ 'pas')
    {
        @tmp = split('/',$tex_dir);
        my $PAS_name = @tmp[$#tmp-1];
        if ($PAS_name =~ "tags" || $PAS_name =~ "branches") {$PAS_name = @tmp[$#tmp-2];} # back up one level if a tag
        $PAS_name =~ s/_/\-/g; # convert underscores to dashes
        @tmp = split('-',$PAS_name);
        # generate contact address from PAS type
        my $PAS_type = @tmp[0];
        my %PAS_types = (
          PPD => "cms-PPD-conveners",
          FTR => "cms-future-conveners",
          B2G => "cms-pag-conveners-b2g",
          BPH => "cms-pag-conveners-bphysics",
          BTV => "cms-pog-conveners-btag",
          EGM => "cms-pog-conveners-egamma",
          EWK => "cms-pag-conveners-ewk",
          EXO => "cms-pag-conveners-exotica",
          DIF => "cms-pag-conveners-fwd",
          FWD => "cms-pag-conveners-fwd",
          FSQ => "cms-pag-conveners-fsq",
          GEN => "cms-pag-conveners-generators",
          HIG => "cms-pag-conveners-higgs",
          HIN => "cms-pag-conveners-heavyions",
          JME => "cms-pog-conveners-jetmet",
          LUM => "cms-pog-conveners-lum",
          MUO => "cms-pog-conveners-muons",
          PFT => "cms-pog-conveners-pflowtau",
          PRF => "cms-pog-conveners-prf",
          QCD => "cms-pag-conveners-qcd",
          SBM => "cms-pag-conveners-exotica",
          SMP => "cms-pag-conveners-smp",
          SUS => "cms-pag-conveners-susy",
          TAU => "cms-pog-conveners-tau",
          TOP => "cms-pag-conveners-top",
          TRK => "cms-pog-conveners-tracking",
          CFT => "cms-craft-papers");
        $contactAddress = $PAS_types{$PAS_type};
        $contactAddress .= '@cern.ch';
        my $toAddress="\\href{mailto:".$contactAddress."?subject=".$PAS_name."}{Contact: ".$contactAddress."}";

        &myrep("$temp_tex","$temp_tex","begin{document}","begin{document}\\cmsNoteHeader{$PAS_name}\\cmsNoteContact{$toAddress}");
    }
    if ($style eq 'cmspaper')
    {
         @tmp = split('/',$tex_dir);
         my $paperTag = @tmp[$#tmp-1];
         if ($paperTag =~ "tags" || $paperTag =~ "branches") {$paperTag = @tmp[$#tmp-2];} # back up one level if a tag
         $paperTag =~ s/_/\-/g; # convert underscores to dashes
         &myrep("$temp_tex","$temp_tex","begin{document}","begin{document}\\cmsNoteHeader{$paperTag}");
    }


#
# get the definitions.tex file from the tree you are in
#

    if( -e "$tex_dir/definitions.tex") { &mycat( "$tex_dir/definitions.tex", $temp_tex) ; }
    if( -e "$tex_dir/../definitions.tex") { &mycat( "$tex_dir/../definitions.tex", $temp_tex) ; }
    if( -e "$tex_dir/../../definitions.tex") { &mycat( "$tex_dir/../../definitions.tex", $temp_tex) ; }
    if( -e "$tex_dir/../../../definitions.tex") { &mycat( "$tex_dir/../../../definitions.tex", $temp_tex) ; }
    if( -e "$tex_dir/../../../../definitions.tex") { &mycat( "$tex_dir/../../../../definitions.tex", $temp_tex) ; }
#
# This is general definitions file - it uses \providecommand so definitions can
# be overridden just by defining them in one of the above definitions.tex files
#
    if( -e "$gen_dir/definitions.tex" && ($gen_dir ne $tex_dir) ) { &mycat("$gen_dir/definitions.tex", $temp_tex) ; }

    &mycat( $full_target_tex, $temp_tex);
    if (($arxiv || ($style =~ 'cmspaper' && ! $draft)) && !$preflight )
    {
        if ( !$journal && $authorfilename)
        {
            open(OUTF, ">>", $temp_tex) || die("can't open outputfile: $!");
            print OUTF "\\cleardoublepage ${appendix}\\section{The CMS Collaboration \\label{app:collab}}\\begin{sloppypar}\\hyphenpenalty=5000\\widowpenalty=500\\clubpenalty=5000\\input{$authorfilename}\\end{sloppypar}\n";
            close(OUTF);
        }
        # overwrite pdf author for versions uploaded to public repositories
        &replacePdfAuthor( $temp_tex, 1 );
    }

    if ( $preflight || ($upload && ! $draft) ) # overwrite pdf author for versions uploaded to public repositories; strip TeX comments beginning a new line
    {
        if ($style =~ 'cmspaper' || $style =~ 'pas')
            { &replacePdfAuthor( $temp_tex, 1 ); }
        else
            { &replacePdfAuthor( $temp_tex, 0 ); }
    }

    &mycat( "$gen_dir/skeleton_end.tex", $temp_tex);

# Set up temporary bibliography style and DB files

    my $temp_bst = "$tmp_dir/auto_generated.bst"; # Note: this is referred to explicitly from latex
    my $temp_bib = "$tmp_dir/auto_generated.bib"; # Note: this is referred to explicitly from latex

    unlink($temp_bst);
    unlink($temp_bib);

    copy("$gen_dir/lucas_unsrt.bst", $temp_bst);

    &mycat(bsd_glob("$tex_dir/*.bib"), bsd_glob("$tex_dir/bib/*.bib"), bsd_glob("$tex_dir/../bib/*.bib"), bsd_glob("$tex_dir/../../bib/*.bib"), $temp_bib);

    if ($apsStyle) {&makeAPS($temp_tex, $temp_tex."-jnl", $apsStyle); &makeAPS($temp_tex, $temp_tex, $apsStyle);}
    if ($plbStyle) {&makePLB($temp_tex, $temp_tex."-jnl", $plbStyle); &makePLB($temp_tex, $temp_tex, $plbStyle);}
    if ($epjcStyle) {&makeEPJC($temp_tex, $temp_tex."-jnl", $epjcStyle); &makeEPJC($temp_tex, $temp_tex, $epjcStyle);}
    if ($jhepStyle) {&makeJHEP($temp_tex, $temp_tex."-jnl", $jhepStyle); &makeJHEP($temp_tex, $temp_tex, $jhepStyle);}
    if ($npahaStyle) {&makeNPAHA($temp_tex, $temp_tex."-jnl", $npahaStyle); &makeNPAHA($temp_tex, $temp_tex, $npahaStyle);}

# various output log and error files; double quotes allow spaces in paths
    $temp_texq = '"'.$temp_tex.'"';
    $temp_stemq = '"'.$temp_stem.'"';
    $temp_pdfout = $temp_stem.'.pdftex_out';
    $temp_pdfoutq = '"'.$temp_pdfout.'"';
    $temp_pdferr = $temp_stem.'.err';
    $temp_pdferrq = '"'.$temp_pdferr.'"';
    $temp_bbl = $temp_stem.'.bbl';
    $temp_bibout = $temp_stem.'_bib.out';
    $temp_biboutq = '"'.$temp_bibout.'"';
    $temp_biberr = $temp_stem.'_bib.err';
    $temp_biberrq = '"'.$temp_biberr.'"';
    $temp_pdf = $temp_stem.'.pdf';
    my $temp_ps = $temp_stem.'.ps';
    my $temp_psq = '"'.$temp_ps.'"';
    $temp_pdflog = $temp_stem.'.log';
    my $banner = "-------------------------------------------------------------------\n";

 # Now run latex, build table of contents, index, etc. and create dvi/PS/etc. files
    if ($^O eq "MSWin32")
    {
        my $orig_dir = Cwd::abs_path;
        chdir($tmp_dir);
        my $dirstring;
        my $files = $ENV{TEXINPUTS};
        $files =~ s/\//\\/g; # replace forward slashes with back slashes
        foreach my $dir (split($ps,$files)) {
            if (-e $dir) {$dirstring .= "-include-directory=".'"'.$dir.'" '};
            }
        if ( !$verbose )
        {
          print ("First pass TeXing file: $temp_texq\n");
          system ("$texProgram -interaction=batchmode -synctex=0 -draftmode $dirstring $temp_texq 1> NUL 2> NUL");
          print ("BibTeXing file: $temp_stem\n");
          system ("bibtex $dirstring $temp_stemq 1> $temp_biboutq 2> $temp_biberrq");
          if ($journal) {
              rewriteBib($tmp_dir, $target, $apsStyle);
              system ("bibtex $dirstring $temp_stemq 1> $temp_biboutq 2> $temp_biberrq");}
          elsif ($arxiv) {
               rewriteBib($tmp_dir, $target, 0);
              system ("bibtex $dirstring $temp_stemq 1> $temp_biboutq 2> $temp_biberrq");}
          print ("2nd pass TeXing file: $temp_texq\n");
          system ("$texProgram -interaction=batchmode -synctex=0 -draftmode $dirstring $temp_texq 1> NUL 2> NUL");
          print ("final (3rd pass) TeXing file: $temp_texq\n");
          system ("$texProgram -interaction=batchmode -synctex=1 $dirstring $temp_texq 1> $temp_pdfoutq 2> $temp_pdferrq ");
          if ($latex)
          {
             print ("Converting to ps\n");
             system ("dvips -R0 -t a4 -o $temp_psq $temp_stemq");
          }
        }
        else
        {
          print ("\n===============================================================\n");
          # Will break old perl at lxplus
          # use File::Which qw(which where);
          # my @texpaths=where('pdftex');
          # print "Which pdftex: ",@texpaths[0]," ",`pdftex -version`,"\n";
          print "Which pdftex: ",`pdftex -version`,"\n";
          print ("First pass TeXing file: $temp_texq\n");
          system ("$texProgram -interaction=batchmode -synctex=0  -draftmode $dirstring $temp_texq");
          print ("BibTeXing file: $temp_stem\n");
          system ("bibtex $dirstring $temp_stemq");
          if ($journal) {
              rewriteBib($tmp_dir, $target, $apsStyle);
              print ("Re-BibTeXing file: $temp_stem\n");
              system ("bibtex $dirstring $temp_stemq");}
           elsif ($arxiv) {
              rewriteBib($tmp_dir, $target, 0);
              print ("Re-BibTeXing file: $temp_stem\n");
              system ("bibtex $dirstring $temp_stemq");}
         print ("2nd pass TeXing file: $temp_texq\n");
          system ("$texProgram -interaction=batchmode -synctex=0  -draftmode $dirstring $temp_texq");
          print ("final (3rd pass) TeXing file: $temp_texq\n");
          system ("$texProgram -interaction=batchmode -synctex=1 $dirstring $temp_texq");
          if ($latex)
          {
             print ("Converting to ps\n");
             system ("dvips -R0 -t a4 -o $temp_psq $temp_stemq");
          }
        }
        chdir( $orig_dir);
    }
    else
    {
        # check for certified CMS version of tex
        my $TeXversion;
        my $baseTeXversion = "3.1415926-1.40.11-2.2";
        my $arch = "x86_64";
        if ( `pdftex -version` =~ /pdfTeX\s*(\S*)/ ) {$TeXversion=$1};
        if ( -e '/afs/cern.ch/cms/external/tex/texlive/2010/bin/x86_64-linux/pdflatex' && $^O ne "darwin" )
        {
          if (`uname -p` !~ $arch) {$arch = "i386"}; # check for non-64 bit on lxplus - need ~ since `` includes trailing newline
          my $texpath = "/afs/cern.ch/cms/external/tex/texlive/2010/bin/".$arch."-linux";
          if ( `$texpath/pdflatex -version` =~ /pdfTeX\s*(\S*)/ ) {$baseTeXversion=$1};
          if ($TeXversion != $baseTeXversion)
          {
            $ENV{'PATH'} = $texpath.':'.$ENV{'PATH'};
          }
          #probe version of python for auxiliary scripts; need 2.6.4 or better
          my $pyVer = `python -V 2>&1`;
          if ( $pyVer !~ m/([23])\.([0-9])\.?([0-9])?/ && ($1 > 2 || ($1 == 2 && (($2 == 6 && $3 >= 4) || $2 > 6 ))))
          {
             my $pyPath = "/usr/bin/python2.6";
             if ( -e $pyPath ) # location on lxplus
             {
                  $ENV{'PATH'} = $pyPath.':'.$ENV{'PATH'};
             }
          }
        }
        elsif ($TeXversion != $baseTeXversion)
        {
          print "Using non-standard version of pdftex: ",`which pdftex`," ",`pdftex -version`,"\n";
        }
        chdir ($tmp_dir);
        if ( !$verbose )
        {
          print ("\n===============================================================\n");
          print ("First pass TeXing file: $temp_texq\n\n");
          system ( "$texProgram -interaction=batchmode $temp_tex 1> /dev/null 2> /dev/null ");
          print ("\n===============================================================\n");
          print ("BibTeXing file: $temp_texq\n\n");
# system ( "bibtex $temp_stem 1> $temp_biboutq 2> $temp_biberrq ");
          system ( "bibtex $temp_stem ");
          if ($journal) {
              rewriteBib($tmp_dir, $target, $apsStyle);
              system ( "bibtex $temp_stem ");}
          elsif ($arxiv) {
              rewriteBib($tmp_dir, $target, 0);
              system ( "bibtex $temp_stem ");}
          print ("\n===============================================================\n");
          print ("Second pass TeXing file: $temp_texq\n\n");
          system ( "$texProgram -interaction=batchmode $temp_tex 1> /dev/null 2> /dev/null ");
          print ("\n===============================================================\n");
          print ("Final (third) pass TeXing file: $temp_texq\n\n");
          system ( "$texProgram -interaction=batchmode $temp_tex 1> $temp_pdfoutq 2> $temp_pdferrq ");
          if ($latex)
          {
             print ("Converting to ps\n");
             system ("dvips -o $temp_ps $temp_stem");
          }
        }
        else
        {
          print ("\n===============================================================\n");
          print "Which pdftex: ",`which pdftex`," ",`pdftex -version`,"\n";
          print ("\n===============================================================\n");
          print ("First pass TeXing file: $temp_texq\n\n");
          system ( "$texProgram $temp_tex");
          print ("\n===============================================================\n");
          print ("BibTeXing file: $temp_texq\n\n");
          system ( "bibtex $temp_stem");
          if ($journal) {
              rewriteBib($tmp_dir, $target, $apsStyle);
              print ("Re-BibTeXing file: $temp_texq\n\n");
             system ( "bibtex $temp_stem");}
          elsif ($arxiv) {
              rewriteBib($tmp_dir, $target, 0);
              print ("Re-BibTeXing file: $temp_texq\n\n");
             system ( "bibtex $temp_stem");}
          print ("\n===============================================================\n");
          print ("Second pass TeXing file: $temp_texq\n\n");
          system ( "$texProgram $temp_tex");
          print ("\n===============================================================\n");
          print ("Final (third) pass TeXing file: $temp_texq\n\n");
          system ( "$texProgram $temp_tex");
          if ($latex)
          {
             print ("Converting to ps\n");
             system ("dvips -o $temp_ps $temp_stem");
          }
        }
    }

    if ( !$verbose )
    {
      print "\n",$banner,"\n",
      "PdfLaTeX errors (filtered):\n\n";
      open (LOGFILE, $temp_pdflog) || die ("can't open the log file: $!");
      #local $/ = "\n\n"; # reset EOR... most error messages are terminated by a blank line, so let's use it... apparently new behaviour: revert to single \n?
      # (This misses: "! Emergency stop" and "*** (job aborted ") and allows extra lines after "PDF inclusion: found PDF version" warnings
      while ( <LOGFILE> ) {
      	next if (/Float|float|Font Warning|weird|found\s+PDF\s+version\s+<1.6>|found\s+pdf\s+version\s+<1.5>|multiply\s|BigDraft/);
      	if (/! |Missing character|Warning:|Error:|Fatal|Undefined|runaway|Runaway|pdftex Warning|pdfTeX warning/)
        {
          print "--- from logfile ---\n";
          print;
          my $nline = 0;
          while ( $nline < 10)
          {
            $_ = <LOGFILE>;
            if (!defined $_) {last;} # check for EOF
            if (m/^\s*$/) # look for empty line
            {
              last;
            }
            else
            {
              print;
              $nline = $nline+1;
            }
          }
        }
      }
      close (LOGFILE);
    }

    print $banner, "Output directory: $tmp_dir\n";
    print $banner, "Output Log files:\n";
    print "$temp_pdflog\n" if -e $temp_pdflog;
    print "$temp_pdfout\n" if -e $temp_pdfout;
    print "$temp_pdferr\n" if -e $temp_pdferr;
    print "$temp_bibout\n" if -e $temp_bibout;
    print "$temp_biberr\n" if -e $temp_biberr;

    if (!$latex)
    {
        print $banner;
        print " PDF Output file: $temp_pdf\n" if -e $temp_pdf;
    }
    else
    { print $banner;
        print " PS Output file: $temp_ps\n" if -e $temp_ps;
    }
    print $banner;
    if ($copyPdf && -e $temp_pdf)
    {
        if ($copyPdf =~ "svn")
        {
            my $svnVersionSanitized = $svnVersion;
            $svnVersionSanitized =~ s/:/-/g;
            print "Copying $temp_pdf\n to ", "$tex_dir/${target}_$svnVersionSanitized.pdf\n";
            copy ($temp_pdf, "$tex_dir/${target}_$svnVersionSanitized.pdf") or die "Copy failed: $!";
        }
        else
        {
            print "Copying $temp_pdf\n to ", "$tex_dir/${target}_auto.pdf\n";
            copy ($temp_pdf, "$tex_dir/${target}_auto.pdf") or die "Copy failed: $!";
        }
        print $banner;
    }

    if ($journal) { move ( $temp_tex."-jnl", $temp_tex ); }

    if ( ($style =~ 'pas' || $style =~ 'cmspaper') && !$upload)
    {
        #strip out title(s)
        my $title = '';
        my $author = '';
        open(FILE, $temp_tex) || die("can't open TeX file $temp_tex: $!");
        $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
        close(FILE);
        # extract metadata
        m/\\hypersetup(.*)/s; # find hypersetup
        my $xtract = $1;
        my $substring = extract_bracketed($xtract,'{}');
        if ($substring =~ m/pdftitle\s*=\s*\{(.*?)\}/s) #use non-greedy matching
        {
            $title = $1;
            print "\n", ">>> PDF TITLE: ",$title,"\n";
        }
        else
        {
            print "Cannot find title in metadata\n";
        }
        if ($substring =~ m/pdfauthor\s*=\s*\{(.*?)\}/s)
        { $author = $1;
            print "\n", ">>> PDF AUTH : ",$author,"\n";
        }

    }
    if ($arxiv || ($style =~ 'cmspaper' && ! $draft))
    {
        # print out abstract for cut and paste into upload forms
        my $abstract;
        $pos = index($_,'\abstract');
        if ($pos)
        {
            my $stext = substr($_,$pos+9); #skip \abstract
            $abstract = extract_bracketed($stext,'{}');
            $abstract = substr($abstract,1,-1); # remove braces
            # now clean up whitespace
            $abstract =~ s/^\s*//; #begin
            $abstract =~ s/\s*$//; #end
            $abstract =~ s/\s{2,}/ /mg; #multiple interior...
            print ">>> LaTeX ABSTRACT: ",$abstract,"\n";
            print ">>> ---- <<<\n";
        }
        else
        {
            print "$0: no abstract found\nExiting...\n";
            return;
        }

        &export_arxiv($target, $preflight);
     }
    if ( $export ) {
        my @exportFiles = ($temp_tex, $temp_bbl, $temp_bib, $temp_bst, "$gen_dir/cms-tdr.cls", "$gen_dir/CMS-bw-logo.pdf",
        "$gen_dir/topcapt.sty", "$gen_dir/ptdr-definitions.sty", "$gen_dir/pennames-pazo.sty");
        push(@exportFiles, $target);

        &export_files(@exportFiles);
    }
    # wrap for deposition in CDS
    if ( $wrap || $preview) {
        &wrap_files($full_target_tex, $temp_pdf, $temp_pdflog, $tex_dir, $contactAddress, $upload);
    }
}
#############################################################################
sub wrap_files {
# will eventually move most of this into makeManifest: for now just "?smart?" wrapper
    my $full_target_tex = shift;
    my $tmp_out =~ s+\\+/+g; #unix-style filepath
    my $pdfFile = shift;
    my $pdfOut = $pdfFile;
    $pdfOut =~ s/_temp.pdf$/-$style.pdf/;
    $pdfOut = basename($pdfOut);
    my $logFile = shift;
    my $baseDir = shift;
    my @parts = split m+/+, $baseDir;
    my $noteCode = $parts[$#parts-1];
    if ($style =~ 'pas')
    {
        push(@exportFiles,$target);
    }
    my $contactAddress = shift;
    my $upload = shift;
    if ($upload)
    {
        my $base_out = "/afs/cern.ch/cms/PAS/test/";
        $tmp_out = $base_out.$noteCode; #means must have afs access...
        if (! -d $tmp_out)
        {
           if ( ! mkdir ($tmp_out) )
           {
               $tmp_out = tempdir("tdr_XXXXXX", TMPDIR => 1) or die;
               print "Made temporary directory $tmp_out for --wrap\n";
           }
        }
        else
        { #delete contents
            unlink(bsd_glob("$tmp_out/*"));
        }
        copy($pdfFile, "$base_out/$pdfOut") or warn "Can't copy $pdfFile\n"; # keep this copy for backwards compatibility
    }
    else
    {
        $tmp_out = tempdir("tdr_XXXXXX", TMPDIR => 1) or die;
        print "Made temporary directory $tmp_out for --wrap\n";
    }
    # map pas/paper area to one of three CDS categories, 0:"Particle Physics - Experiment", 1:"Nuclear Physics - Experiment", 2:"Detectors and Experimental Techniques")
    my %PAS_map = (
    FTR => "0",
    B2G => "0",
    BPH => "0",
    BTV => "0",
    EGM => "0",
    EWK => "0",
    EXO => "0",
    DIF => "0",
    FWD => "0",
    FSQ => "0",
    GEN => "0",
    HIG => "0",
    HIN => "1",
    JME => "0",
    LUM => "2",
    MUO => "2",
    PFT => "2",
    PRF => "0",
    QCD => "0",
    SBM => "0",
    SMP => "0",
    SUS => "0",
    TAU => "0",
    TOP => "0",
    TRK => "2",
    CFT => "0");
    my $artType = $PAS_map{substr($noteCode,0,3)};

    copy($pdfFile, "$tmp_out/$pdfOut") or warn "Can't copy $pdfFile\n"; # and this one for the upload
    local @ARGV;
    @ARGV = ("--tex", $full_target_tex, "--doc", $pdfOut, "--style", "$style", "--baseDir", $baseDir, "--outDir", $tmp_out, "--logFile", $logFile, "--contactAddress", $contactAddress, "--artType", $artType);
    if ($verbose) {
        push(@ARGV, "--verbose");
    }
    if (!$dataNotMC)
    {
        push(@ARGV, "--no-data");
    }
    if ($reload)
    {
        push(@ARGV, "--updateRecord", $reload);
    }
    if ($verbose) {print("Making the manifest\n");}
    eval { require "$gen_dir/makeManifest.pl" };

    if (!$preview)
    {
        # not all systems have Archive, so test
        my $useArchive = eval {require Archive::Zip};
        my $archive;
        if ($useArchive)
        {
            $archive = "$tmp_dir/submit.zip";
            my $zip = Archive::Zip->new();
            $zip->addTree("$tmp_out");
            my $status = $zip->writeToFileNamed("$archive");
            if ( $status != AZ_OK )
            {
                print "Can't make archive file\n";
            }
        }
        else
        {
            my $orig_dir = Cwd::abs_path;
            chdir($tmp_out);
            $archive = "$tmp_dir/submit.tgz";
            system("tar --gzip --create --file $archive *")==0 or die "Error creating tar file. Sorry";
            chdir($orig_dir);
        }
        if ($verbose) {print "Created archive file $archive.\n"};
        # now submit to cds
        if ($upload) {
            my $uploadMode = $reload ? '-r' : '-i';
            my $curlCmd = "curl -F 'file=@/afs/cern.ch/cms/PAS/test/$noteCode/manifest.xml' -F 'mode=$uploadMode' http://cds.cern.ch/batchuploader/robotupload -A invenio_webupload";
            if ($preflight)
            {
                print "Preflight mode. If this had been an actual upload, the command would have been:\n\t$curlCmd\n";
            }
            else
            {
               print "Uploading to CDS using command: $curlCmd\n";
               system($curlCmd);
               if (!$?==0) { print "Error uploading file to cds.\n"; }
               if ($verbose) { print "Uploaded manifest file to server.\n"; }
            }
        }
    }


}
#############################################################################
sub export_arxiv {


    ##
    # Pull out all included files, stripping off any .tex at the end.
    # We thus end up with TeX files like "aaa" and others files like "ot1ppl.fd".
    # We use * to include any possible path descriptor and names with embedded '.' or space.
    #
    # This depends on the "unique" markers to denote input and figure files: <789FIG ..> and <567INP ..>.
    # These are generated by renewed commands from the class file
    #
    # arguments:
    # target
    # include-bib-file: arxiv doesn't want bib files, journals do
    # globals:
    # $temp_pdflog, $tex_dir, $tmp_dir, $gen_dir, $temp_bbl, $temp_tex, $tmp_dir
    ##

    # input-ed TeX files
    # this section will currently break on a split across lines
    open(FILE, $temp_pdflog) || die "Couldn't open $temp_pdflog\n";
    my @incFiles = map { /<567INP (?:(.*)\.tex|(.*))>/ } <FILE>; # use ?: so only get sub-groupings from (()())
    close(FILE);
    # Remove all which are not local TeX files. Test by looking for file'.tex'
    # Nothing outside base tree allowed.
    my @incFiles2 = map { if ($_ && -e "$tex_dir/${_}.tex") {$_.'.tex'} } @incFiles;
    my @incFiles3 = grep ( !/^$/, @incFiles2); # weed out empties
    # make a hash of the required subdirectories to keep track of any dupes for us
    my %incDirs;
    # = map { if (/(.*)\/.*$/) {$1 => $_ }} @incFiles3;
    foreach (@incFiles3)
    {
        if ( /(.*)\/.*$/  && -e $tex_dir."/".$_) { $incDirs{$1} = $_;}
    }

    # print "size of incDirs hash = ".keys(%incDirs)."\n";
    # while ( my ($key, $value) = each(%incDirs) ) {
    # print "d> .$key.=>.$value.\n";
    # }
    open(FILE, $temp_pdflog) || die "Couldn't open $temp_pdflog\n";
    $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
    close(FILE);
    my @figFiles;
    # look for tag followed by a name and optional filetype
    # exemplar: (note, may be possible intervening warning messages/blank lines)
    #
    # <789FIG figures/pixel_blue_orange_flat.png 1a>
    # <figures/pixel_blue_orange_flat.png, id=107, 4717.625pt x 3333.45375pt>
    # File: figures/pixel_blue_orange_flat.png Graphic file (type png)
    #
    # Use gms modifier to allow multiple lines while allowing begin/end line search, global scope
    # Use ?: to not capture outer paren group
     #while ( /^<789FIG\s*(?:(.*?)(\.\w+)?)\s*\d+[a-z]{0,1}\s*>/gms )
    while (/^<789FIG\s*(.*?)>/gms)
    {
        my $tmpstr = $1;
        $tmpstr =~ s/\n//; # strip out any \n
        $tmpstr =~ m/(.*?)(\.\w+)?\s+(\d+|A|B)/; # pick up files in first 2 appendices, A or B
        $tmpstr = $1;
        $tmpstr =~ s/\+/\\\+/;# protect against + in filename
        my $pattern = qr/\G.*?File:\s*($tmpstr\.\w+)\s/ms; # full search string name.ext_
        # The 789 line will break at length=72, the File line at length=75; the File has .ext_n... added at the end
        # breaks within basename File: wraps 2 characters later
        if (length($tmpstr) > 73 ) {$tmpstr=substr($tmpstr,0,73)."\n".substr($tmpstr,73); $pattern = qr/\G.*?File:\s*($tmpstr\.\w+)\s/ms;}
        if (length($tmpstr) == 73) {$pattern = qr/\G.*?File:\s*($tmpstr\n\.\w+)/ms;  print "73! ", $tmpstr, "\n";}
        if (length($tmpstr) == 72) {$pattern = qr/\G.*?File:\s*($tmpstr\.\n\w+)/ms;}
        # breaks somewhere in the extension or not at all
        if (length($tmpstr) <= 71) {$pattern= qr/\G.*?File:\s*($tmpstr\.(\n|\w)+)/ms;} # stops on ' ' or 'Graphics' or '('
        if (m/$pattern/gc ) # c=> don't reset position if failed search using G anchor
        {
           my $found = $1;
           # print " Found File: $found\n"; # debug
           $found =~s/\n//;
           push(@figFiles,$found);
            }
        else
        {
            print ">>><<>><<>> Missing a figure file: $tmpstr\n";
            $tmpstr =~ s/\n//; print length($tmpstr), "\n";
            print $pattern, "\n";
        }
    }
    # map { print "> ","$_","\n"} @figFiles; # debug

    # Remove all which are not in the local directory and children.
    my @figFiles2 = map
    {
        if (-e $tex_dir.'/'.$_) {$_}
    } @figFiles;
    # Weed out files without a match
    # map { print "> ","$_","\n"} @figFiles2;
    my @figFiles3 = grep ( !/^$/, @figFiles2);
    # map { print "> ","$_","\n"} @figFiles3;
    # make a hash of the required subdirectories to keep track of any dupes for us
    # map { if (/(.*)\/.*$/) {print ".$1. .$_.\n" }} @figFiles3;
    my %figDirs;
    foreach (@figFiles3)
    {
        if ( /(.*)\/.*$/ ) {$figDirs{$1} = $_;}
    }
    # print "size of figDirs hash = ".keys(%figDirs)."\n";
    # while ( my ($key, $value) = each(%figDirs) ) {
    # print "d> .$key.=>.$value.\n";
    # }

    my $exp_name = @_[0];
    my $preflight = @_[1];
    my $exp_dir = "export";
    # delete any existing tree
    if (-d $exp_dir) { rmtree($exp_dir) || die "Couldn\'t delete old export directory, $!\n"; }
    mkdir ($exp_dir,0755) || die "Failed to create temporary export directory";
    copy("$tmp_dir/$authorfilename","$exp_dir/$authorfilename"); #authorfilename is a global
    open(FILE,'>',"$exp_dir/${target}_temp.tex") or die "Can't open file for $exp_dir/${target}_temp.tex: $!\n";
    if (!$latex && !$preflight) {print FILE "\\pdfoutput=1\n";} # required by ArXiV for pdfLaTeX processing : remove for latex!
    close(FILE);
    &mycat($temp_tex, "$exp_dir/${target}_temp.tex");
    if (not $journal)
    {
        if ($style eq 'cms_paper')
        {
            copy("$gen_dir/cms_paper.pdf", "$exp_dir/cms_paper.pdf"); # $style is cmspaper by default
        }
        else
        {
            copy("$gen_dir/cms_${style}.pdf","$exp_dir/cms_${style}.pdf");
        }
        copy("$gen_dir/cms-tdr.cls", "$exp_dir/cms-tdr.cls"); #
        copy("$gen_dir/pennames-pazo.sty", "$exp_dir/pennames-pazo.sty");
        copy("$gen_dir/CMS-bw-logo.pdf", "$exp_dir/CMS-bw-logo.pdf");
        copy("$gen_dir/cernlogo.pdf", "$exp_dir/cernlogo.pdf");
        copy("$temp_bbl","$exp_dir/${target}_temp.bbl");
    }
    else
    {
        if ( $apsStyle)
        {
            copy("$gen_dir/pennames-ital.sty","$exp_dir/pennames-ital.sty");
            copy("$temp_bbl","$exp_dir/${target}_temp.bbl");
        }
        else
        {
            if ($plbStyle) {copy("$gen_dir/elsarticle-num-names.bst", "$exp_dir/elsarticle-num-names.bst"); }
            if ($epjcStyle) {copy("$gen_dir/svepj.clo", "$exp_dir/svepj.clo"); copy("$gen_dir/svjour.cls", "$exp_dir/svjour.cls") ;}
            my $texLocalDir = "/afs/cern.ch/cms/external/tex/texlive/texmf-local/tex/latex/local"; # assume have /afs connectivity
            if ($^O eq "MSWin32") {
            $texLocalDir = $ENV{"ProgramData"}."/Local TeX/tex/latex";} # no guarantee for this path whatsoever
            if (! -e $texLocalDir ) { print ">>> Can\'t find TeX source directory: you may not have afs access. You'll need to include some files
            in the export archive by hand!\n";}
            else
            {
                copy($texLocalDir."/misc/pennames.sty","$exp_dir/pennames.sty");
            }
        }
    }
    copy("$gen_dir/ptdr-definitions.sty", "$exp_dir/ptdr-definitions.sty");

    # now the input-ed and includegraphics sub-directories and files
    while ( my ($key, $value) = each(%incDirs) ) {
      if($key ne "")
      {
          mkpath("$exp_dir/$key",{verbose => 1}); #or die "Dying trying to make dir $exp_dir/$key. Errno: $!\n"; #now need to do this for CopyTeXNoComments; don't need files until then
      }
    }
    while ( my ($key, $value) = each(%figDirs) ) {
      if($key ne "")
      {
          mkpath("$exp_dir/$key",{verbose => 1}); #or die "Dying trying to make dir $exp_dir/$key. Errno: $!\n";
      }
    }
    map { copy("$tex_dir/$_","$exp_dir/$_") } @figFiles3;

    while ( my ($key, $value) = each(%incDirs) ) {
        mkdir("$exp_dir/$key");
    }
    map { copyNoTeXcomments("$tex_dir/$_","$exp_dir/$_") } @incFiles3;

    my $orig_dir = getcwd();
    chdir ($exp_dir);
    if (!$preflight)
    {
        if ($apsStyle)
        {
            $xml = $authorfilename;
            $xml =~ s/\.tex$/\.revtex/;
            # get APS-specific tex authorlist
            my $revtex = &myCollab($temp_tex,'revtex');
            # now rename back to standard tex extension
            (my $revtex2 = $revtex) =~ s/\.revtex/\.tex/;
            move($revtex,$revtex2);
        }

        if (not $journal)
        {
            open(FILE,'>',"auto_generated.no-bib");
            print FILE "%auto-ignore\n"; # required by ArXiV for non-processed files
            open(FILE0,'<',"$tmp_dir/auto_generated.bib");
            while (<FILE0>)
            {
                print FILE;
            }
            close(FILE0);
            close(FILE);
            copy("$tmp_dir/auto_generated.bst", "auto_generated.bst");
            open(FILE,'>',"00README.XXX");
            print FILE "$xml ignore\n";
            print FILE "auto_generated.no-bib ignore\n";
            close(FILE);

            # INSPIRE-style xml
            $xml = $authorfilename;
            $xml =~ s/\.tex/\.xml/;
            open(FILE,'>:encoding(UTF-8)',$xml) or die "Can't open file for xml authorlist: $!\n";
            print FILE "%auto-ignore\n"; # required by ArXiV for non-processed files
            close(FILE);
            &myCollab($temp_tex,'xml');

        }
        else
        {
            # INSPIRE-style xml
            &myCollab($temp_tex,'xml');

            copy("$tmp_dir/auto_generated.bib", "auto_generated.bib");
            # only EPJC does not have a house bib style (AFAIK so far)
            if ($epjcStyle ) { copy("$tmp_dir/auto_generated.bst", "auto_generated.bst"); }

            # pick up funding agency list
            copy("$gen_dir/CMS Funding agencies.xlsx", "CMS Funding agencies.xlsx");
       }
    }
    else
    {
        copy("$tmp_dir/auto_generated.bib", "auto_generated.bib");
        copy("$tmp_dir/auto_generated.bst", "auto_generated.bst");
    }

    # As of October 2010, arXiv is up-to-date and we can ignore this block (Correction: except for JHEP)
    # this is a hack to get some files from the TeX distribution area for ArXiV: these
    # are currently out of date on their site: natbib.sty, and bibentry.sty. We also use it to reset no-bib to bib.
    if ($jhepStyle or $npahaStyle)
    {
        my $texSrcDir = "/afs/cern.ch/cms/external/tex/texlive/2010/texmf-dist/tex/latex"; # assume have /afs connectivity
        if ($^O eq "MSWin32") {
            $texSrcDir = $ENV{"ProgramFiles(x86)"}."/MiKTeX 2.9/tex/latex";} # assume MikTeX 2.9 std distribution
        if (! -e $texSrcDir ) { print ">>> Can\'t find TeX source directory: you may not have afs access. You'll need to include some files."}
        else
        {
            copy($texSrcDir."/natbib/natbib.sty","natbib.sty");
            copy($texSrcDir."/natbib/bibentry.sty","bibentry.sty");
        }
        # replace arXiv-style no-bib with actual bib file
        copy("$tmp_dir/auto_generated.bib", "auto_generated.bib");
        unlink("auto_generated.no-bib");
    }


    my $current_dir = getcwd();
    print "\nCreating export directory $current_dir\n";
    my $outdir = $ENV{HOME};
    my $outfile = my $outfile = $outdir."/CMS-".$target.".zip";
    my $outpdf = "../../../../".$target."-arXiv.pdf";
    # these are currently set up for production running: output goes in home directory or desktop
    if ($^O eq "MSWin32") {
        $outdir = $ENV{HOMEDRIVE}.$ENV{HOMEPATH}."\\Desktop\\HIGGSP~1";
        $outfile = $outdir."\\CMS-".$target.".zip";
        # on windows/etc, we keep the final output in the svn tree
        $outpdf = "../../../../".$target."-arXiv.pdf";
        if ($journal || $jhepStyle || $npahaStyle)
        {
            $outfile = $outdir."\\CMS-".$target."-jnl.zip";
            $outpdf = "../../../../".$target."-jnl.pdf";
        }
        copy($temp_pdf,$outpdf); #|| die "Failed to move files: $!";
    }
    else {
        if ($journal || $jhepStyle || $npahaStyle)
        {
            $outfile = $outdir."/CMS-".$target."-jnl.zip";
            $outpdf = "../../../../".$target."-jnl.pdf";
        }
    }
    $outfile2 = $outfile;
    $outfile2 =~ s|\\|/|g;
    if (-e $outfile2) {unlink($outfile2);}
    my $useArchive = eval {require Archive::Zip};
    if ($useArchive)
    {
        my $zip = Archive::Zip->new();
        $zip->addTree('.');
        my $status = $zip->writeToFileNamed($outfile2);
        if ( $status != AZ_OK )
        {
            print "Can't write zip to file $outfile2: $!\n";
        }
        if (1)
        {
            my @archNames = $zip->memberNames();
            print "Contents of $outfile2:\n---------\n";
            print join("\n",@archNames);
        }
    }
    else
    {
        # Use command line version in preference to perl built-in (which often isn't)
        #my $tarfile = Archive::Tar->new;
        #$tarfile->add_files(bsd_glob('*.*'));
        #tarfile->write($outfile);
        $outfile  =~ s|zip|tgz|g;
        system("tar --gzip --create --file $outfile .")==0 or die "Error creating tar file. Sorry";
        print "Created archive file $outfile.\nContents:\n";
        if (1)
        {
            system("tar --gzip --list --file  $outfile")==0 or die "Can't find output tar file $outfile!";
        }
    }
    chdir ($orig_dir);
    if (-d $exp_dir) { rmtree($exp_dir) || die "Couldn\'t delete old export directory, $!\n"; }
}
#############################################################################
sub export_files {
    my @tocopy = (@_);
    my $exp_name = pop(@tocopy); # pop off target name
    my $exp_dir = "export";
    -d $exp_dir || mkdir ($exp_dir,0755) || die "Failed to create temporary export directory";
    unlink(bsd_glob("$exp_dir/*")); #clean out any existing files

    chdir ($exp_dir);
    my $current_dir = getcwd();
    print "\nCreating export directory $current_dir\n";
    if ($style ne 'tdr')
    {
         my $copystyle = $style;
         if ($copystyle eq "cmspaper") {$copystyle = "paper"};
         copy("$gen_dir/cms_draft_$copystyle.pdf", "cms_draft_$copystyle.pdf");
         copy("$gen_dir/cms_$copystyle.pdf", "cms_$copystyle.pdf");
         copy("$gen_dir/pdfdraftcopy.sty","pdfdraftcopy.sty");
         copy("$gen_dir/BigDraft.pdf","BigDraft.pdf");
    }
    recursive_copy($tex_dir,$current_dir,1);
    my @figdirs = split(/$ps/,join($ps,$tex_path));
    for (@figdirs)
    {
      my @in = bsd_glob($_."/*.{pdf,jpg,png,jpeg,eps}");
      for (@in)
      {
        (my $x, my $y, my $file) = File::Spec->splitpath($_);
        copy($_,$file);
      }
    }
    @figdirs = split(/$ps/,join(ps,$fig_path));
    for (@figdirs)
    {
        if (-d $_)
        {
            recursive_copy($_,$current_dir,1);
        }
    }
    for (@tocopy)
    {
        (my $x, my $y, my $file) = File::Spec->splitpath($_);
        copy($_,$file);
    }
    if ($^O eq "MSWin32") {
        print "Export directory ready.\n"
    }
    else {
        chdir ("..");
        system("tar --gzip --create --file $exp_name.tgz $exp_dir")==0 or die "Error creating tar file. Sorry";
        if (-e "$exp_name.tgz") {
            unlink(bsd_glob("$exp_dir/*"));
            rmdir($exp_dir);
            my $exp_path = Cwd::abs_path;
            print "Export tarball $exp_path/$exp_name.tgz is ready.\n";
            if ($verbose) {
                print "Contents of tar archive:\n";
                system("tar --gzip --list --file export.tgz");
            }
        }
        else {
          print "Sorry, something has prevented creation of the tarball.\n";
        }
    }
}
#############################################################################
sub recursive_copy {
# recursively copy a directory tree (not including hidden svn files)
# arguments: from directory, to directory, top dir?
  my $from = abs_path(shift);
  my $to = abs_path(shift);
  my $top = shift;
  -d $from or die "Recursive copy: From directory \"$from\" is not a directory";
  -d $to or die "Recursive copy: To directory \"$to\" is not a directory";
  (my $volume, my $directories, my $file) = File::Spec->splitpath( $from );
  my $tofrom = 0;
  if ($top)
  {
    $tofrom = $to;
  }
  else
  {
    $tofrom = $to."/".$file;
    mkdir $tofrom;
  }
  my @files = bsd_glob($from."/*");
  for (@files)
  {
      if (-f $_ && $_ ne ".svn" )
      {
        (my $volume, my $directories, my $file) = File::Spec->splitpath( $from );
        copy($_,$tofrom);
      }
      elsif (-d $_ && $_ ne $to )
      {
        recursive_copy($_,$tofrom,0);
      }
  }
}



#############################################################################
sub clean {
    print "\nRemoving all contents of temporary directory: $tmp_dir\n";
    unlink(bsd_glob("$tmp_dir/*"));
    rmdir($tmp_dir);
}



#############################################################################
sub veryclean {
# could be less crude but good enough for now

    print "\nCleaning everything...\n";
    &clean();

    print "\nDeleting emacs backup files...\n";
    unlink (bsd_glob ("$top_dir/*.*~"));
    unlink (bsd_glob ("$top_dir/*/*.*~"));
    unlink (bsd_glob ("$top_dir/*/*/*.*~"));
    unlink (bsd_glob ("$top_dir/*/*/*/*.*~"));
    unlink (bsd_glob ("$top_dir/*/*/*/*/*.*~"));

    print "\nDeleting nedit backup files...\n";
    unlink (bsd_glob ("$top_dir/*.*.bak"));
    unlink (bsd_glob ("$top_dir/*/*.*.bak"));
    unlink (bsd_glob ("$top_dir/*/*/*.*.bak"));
    unlink (bsd_glob ("$top_dir/*/*/*/*.*.bak"));
    unlink (bsd_glob ("$top_dir/*/*/*/*/*.*.bak"));

    print "\nDeleting all dvi, toc, lof, etc. files...\n";

    unlink (bsd_glob ("$top_dir/*/*.ind"));
    unlink (bsd_glob ("$top_dir/*/*.ilg"));
    unlink (bsd_glob ("$top_dir/*/*.aux"));
    unlink (bsd_glob ("$top_dir/*/*.aidx"));
    unlink (bsd_glob ("$top_dir/*/*.idx"));
    unlink (bsd_glob ("$top_dir/*/*.lof"));
    unlink (bsd_glob ("$top_dir/*/*.lot"));
    unlink (bsd_glob ("$top_dir/*/*.log"));
    unlink (bsd_glob ("$top_dir/*/*.dvi"));
    unlink (bsd_glob ("$top_dir/*/*.toc"));
    unlink (bsd_glob ("$top_dir/*/*.blg"));
    unlink (bsd_glob ("$top_dir/*/*.bbl"));

}


#############################################################################
sub runtime {
#
# Changes environment variables *OUTSIDE* scope of the script
# (using ENV is only within scope of script).
#
# To use this, you need to use eval (see help) to "invoke" the
# env setting commands which are printed out (see below)
#
    my $shell = $_[0] || "-csh";

# Add bin directory to PATH (but only if it's not there already)

# print ('$PATH = ',"$ENV{PATH} \n");
# print ('$bin_dir = ',"$bin_dir \n");

    if ($ENV{PATH} !~ /$bin_dir/){
        print ("\n");

        if ($shell eq "-csh" || $shell eq "-tcsh") {
            print "echo Prepending PATH with: $bin_dir;",
                  "setenv PATH $bin_dir".":$ENV{PATH}\n";
        }
        elsif($shell eq "-sh" || $shell eq "-ksh"){
            print "echo Prepending PATH with: $bin_dir;",
                  'PATH="',"$bin_dir".":$ENV{PATH}",'";',
                  "export PATH\n";
        }
        else{
            die "Unknown shell option: $shell\n\n";
        }
    }
}

#############################################################################
sub test {

    print "\nExecuting tdr test\n-------------------\n\n";

    print '$cur_dir = ',"$cur_dir\n\n";
    print '$top_dir = ',"$top_dir\n";
    print '$bin_dir = ',"$bin_dir\n";
    print '$gen_dir = ',"$gen_dir\n";
    print '$tex_dir = ',"$tex_dir\n";
    print '$fig_path = ',"$fig_path\n";
    print '$tmp_dir = ',"$tmp_dir\n\n";

    print '$ENV{TEXINPUTS} = ',"$ENV{TEXINPUTS}\n\n";

}



#############################################################################
sub full_path {
#
# Get full directory path from relative one and context
#
  my $file = shift;
  my $current_dir = shift || &cwd();
# print ("full_dir: file= $file, current_dir=$current_dir\n");
  if("$file" eq "")
       {return "";}
  elsif($file=~/^~\/(.*)/)
       {$file="$ENV{HOME}/$1"; }
  elsif($file=~/^~[^\/](.+)\/(.*)/)
       {$file=`dirname ~$1`;
        chomp $file;
        $file="$file/$2";}
  elsif($file=~/^~[^\/](.+)$/)
       {$file=`dirname ~$1`;
        chomp $file;}
  elsif($file=~/^[^\/]/)
       {$file="${current_dir}/$file";}

  return &arrange_path($file);
}

#############################################################################
sub arrange_path {
  my $file=shift;
# print ("arrange_path: file = $file\n");
  if("$file" eq "") {return "";}

  while($file=~/(.*)\/\.\/(.*)/){$file="$1/$2";}

  if($file=~/(.*)\/\.$/){$file="$1";}

  while($file=~/(.*?)\/\.\.\/(.*)/){
     $file=`dirname $1`;
     chomp $file;
     $file="$file/$2";
  }
  while($file=~/(.*?)\/\.\.$/){
     $file=`dirname $1`;
     chomp $file;
  }
  while($file=~/(.*)\/\/(.*)/) {$file="$1/$2";}
# print("arrange_path, returning: $file\n");

  return $file;

}
#############################################################################
sub mycat
{
# acts as cat.
# default is append (see second arg in the open command below)
   my (@args) = @_;
   open(OUTF, ">>", pop(@args)) || die("can't open outputfile: $!");
   FILE: foreach (@args) {

      open(FILE, $_) || ((warn "Can't open file $_\n"), next FILE);

      while (<FILE>) {
         print OUTF;
      }
      close(FILE);
   }
   close(OUTF);
}
#############################################################################
sub myrep { # replace in file; equivalent to perl -p -e 's/xxx/yyy'
   my $infile = shift;
   my $outfile = shift;
   my $in = shift;
   my $out = shift;
   my $replace = ($infile eq $outfile);
   my $outf, $tmpf;
   open(INF, $infile) or die("can't open inputfile: $!");
   if ($replace)
   {
     ($outf, $tmpf) = tempfile() or die("can't open temp file!");
   }
   else
   {
     open($outf, ">", $outfile) or die("can't open outputfile: $!");
   }
   while (<INF>) {
         s/$in/$out/;
         print $outf "$_";
   }
   close($outf);
   close(INF);
   if ($replace)
   {
     copy($tmpf,$outfile);
     unlink($tmpf);

   }

}
#############################################################################
sub myls { # acts as a sort of ls
# expects the directory as the first argument and the bsd_glob pattern as the (optional) second argument
  my $dir = shift;
  my $ext = shift;
  if ($ext eq '') {$ext = '*';}
  my @list = bsd_glob($dir.'/'.$ext);
  for (@list) {
# s|^$dir/||;
    print $_,"\n";
    }
}
#############################################################################
sub myCollab {
# Adds the appendix with the collaboration list
# default is append (see second arg in the open command below)
# args are the tex filename and the type of collaboration list desired: tex or xml

   my (@args) = @_;
   $_ = @_[0];
   /^(.*\/tmp\/)(.*)_temp.tex/; #extract the tag
   my $tag = $2;
   my $type = $_[1];
   my $tagfileout = $tag.'-authorlist.'.$type; # our name; could just use 'authorlist.'.$type
   if ($tag =~ /CFT-09-.*/) {$tag = 'CRAFT-V2-09'}; # all CFT-09's have a common authorlist??
   # name on server; xml file is now authorlistN
   my $tagfile;
   if ($type =~ 'xml')
   {$tagfile = $tag.'-authorlistN.'.$type;}
   else
   {$tagfile = $tag.'-authorlist.'.$type;}
   my $body;
   my $url = 'https://cms-secr.web.cern.ch/cms-secr/Documents/authorListCMS/'.$tagfile;
   my $response = &get_url ($url);
   if (!$response->is_success)
   {
     print "::: $url not found :::\n";
     print("    Status: ",$response->status_line);
     print "\n::::::\n";
     return 0; #should die?
   }
   else
   {
       $body = $response->decoded_content;
   }
   if ($type =~ 'tex') {$body =~ s/(\w\,*)~(\w)/$1 $2/g; $body =~ s/,/, /g; } #allow normal spacing and line breaking
   # save the authorlist
   if ($type =~ 'xml' || $type =~ 'revtex')
   {
       open(OUTF, ">>:encoding(UTF-8)", $tagfileout) || die("Can't open outputfile: $!");
   }
   else
   {
       open(OUTF, ">>", $tagfileout) || die("Can't open outputfile: $!");
   }
   print OUTF $body;
   close(OUTF);
   return $tagfileout;
}
#############################################################################
sub get_url{
    my ($url) = @_;

    use strict;
    use warnings;
    my $ua = LWP::UserAgent->new(ssl_opts=>{verify_hostname=>0});
    return $ua->get($url);
    }
##############################################################################
#
# Make sure author in PDF metadata is CMS Collaboration; optionally removes any supplied authors
#
sub replacePdfAuthor{
   my $file = shift;
   my $delAuth = shift;
   open(FILE, $file) || die("can't open TeX file $file: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);
   s/pdfauthor\s*=\s*\{(.*?)\}/pdfauthor=\{CMS Collaboration\}/s;
   # remove all lines starting with comment character:
   # leaves inline comments (not starting at column 1) intact
   s/^[ |\t]*%.*\r?\n//mg;
   if ($delAuth)
   {
   # remove all author and address macros and replace with standard
       s/\\author\[(.*)\]\{.*\}//g;
       s/\\address\[(.*)\]\{.*\}//g;
   }
   open(FILE, "> $file") || die("can't open file $file: $! for write");
   print FILE $_;
   close(FILE);
}
##############################################################################
#
# Remove TeX comment lines (starting with % in column 1). Inline comments left
#
sub copyNoTeXcomments{
   my $infile = shift;
   my $outfile = shift;
   open(FILE, $infile) || die("can't open TeX file $infile: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);
   # remove all lines starting with (optional space) comment character:
   # leaves inline comments (with non-blank text at the head) intact
   s/^[ |\t]*%.*\r?\n//mg;
   open(FILE, "> $outfile") || die("can't open file $outfile: $! for write");
   print FILE $_;
   close(FILE);
}

##############################################################################
#
# APS post-processor
#
sub makeAPS{
   my $infile = shift;
   my $outfile = shift;
   my $style = shift;
   if ($style eq '-') {$style = "prl,reprint,longbibliography";} # default style; removed showpacs option

   &replacePdfAuthor($infile, 1);

   my $preface = <<EOD;
\\documentclass[amsmath,amssymb,aps,floatfix,$style]{revtex4-1}
\\usepackage{xspace}
\\usepackage[bookmarksnumbered,bookmarksopen,bookmarksopenlevel=1,colorlinks=false,plainpages=false,pdfpagelabels]{hyperref}
\\usepackage{graphicx,graphics}
\\usepackage{array}
\\usepackage{ifthen}
\\usepackage{multirow}
\\usepackage{pennames-ital}
\\usepackage{topcapt}
\\usepackage{lineno}
\\usepackage{dcolumn}
\\usepackage{rotating} % only for HIG-14-042
%\\usepackage[table,usenames,dvipsnames]{xcolor}
%\\usepackage{colortbl}
\\DeclareMathOperator{\\sgn}{sgn}% Declare the sgn operator
\\DeclareMathOperator{\\sign}{sign}% for those who insist on sign instead
\\DeclareMathOperator{\\erf}{erf} % and the erf operator
\\DeclareMathOperator{\\Tr}{Tr}
\\DeclareMathOperator{\\Arg}{Arg}
\\providecommand{\\cmsNoteHeader}[1]{\\preprint{#1}}
\\providecommand{\\cmsNoteContact}[1]{\\relax}
\\providecommand{\\cmsCollabName}{The CMS Collaboration}
\\providecommand{\\cmsNUMBER}{\\relax}
\\providecommand{\\cmslogo}{\\relax}
\\providecommand{\\cmsTag}{\\relax}
\\providecommand{\\appMsg}{\\relax}
\\providecommand{\\cmsCopyright}{\\relax}
\\providecommand{\\cmsPubBlock}{\\relax}
% authorlist formatting; cmsAuthorMark matches use in endnotes
\\newcommand{\\cmsAuthorMark}[1]{\\hbox{\\\@textsuperscript{\\normalfont#1}}}
\\newskip{\\cmsinstskip} \\cmsinstskip=0pt plus 4pt
\\newskip{\\cmsauthskip} \\cmsauthskip=16pt
% to allow external commands, embed in an ifthen testing on cms@external
\\newboolean{cms\@external}
\\setboolean{cms\@external}{true}
% to use italic particle names
\\newboolean{cms\@italic}
\\setboolean{cms\@italic}{true}
\\usepackage{ptdr-definitions}
\\renewcommand{\\ETslash}{\\ensuremath{E_{\\mathrm{T}}\\hspace{-1.2em}/\\kern0.65em}\\xspace}
\\providecommand{\\DOI}[1]{\\href{http://dx.doi.org/#1}{\\doi{#1}}}
EOD

   my $preface2 = <<EOD;
\\makeatletter
\\let\\OldGinclude\@graphics\\Ginclude\@graphics\\renewcommand{\\Ginclude\@graphics}[1]{\\typeout{<789FIG #1 \\thefigure>}\\OldGinclude\@graphics{#1}}%
\\let\\OldCMS\@input\\InputIfFileExists\\long\\def\\InputIfFileExists#1#2#3{{\\typeout{<567INP #1>}}{}\\OldCMS\@input{#1}{#2}{#3}}%
\\makeatother
EOD

   if ($infile eq $outfile) { $preface .= $preface2; }

   open(FILE, $infile) || die("can't open TeX file $infile: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);

   # remove all the RCS information
   s/^\\RCS\$.*?$//mg;

   #replace doc class
   s/\\documentclass\[.*?\]\{.*?\}/$preface/sg;

    # remove any author/address and replace with standard paper values later
    s/\\address.*?\}//sg;
    s/\\author.*?\}//sg;
# #replace \addresss[] with \affiliation
# s/\\address\[(.*?)\]/\\affiliation/sg;
# #ditto author
# s/\\author\[(.*?)\]/\\author/sg;
# # still need to reverse the order: aps wants author address, we have address author


   # get ready to re-write
   open(FILE, "> $outfile") || die("can't open file $outfile: $! for write");

   # find the abstract
   m/(.*?)\\abstract(\{.*)/s;
   print FILE $1, "\\author{\\cmsCollabName}\n\\affiliation{CERN}\n\\begin{abstract}\n";

   my @substring = extract_bracketed("abstract".$2,"{}","abstract");
   #strip off enclosing {}
   $substring[0] =~ m/\{(.*)\}/s;
   print FILE $1;
   print FILE "\n\\end{abstract}\n";
   #extract keywords
   m/pdfkeywords\s*=\s*\{(.*?)\}/s;
   my $keywords = $1;

   # suppress keyword generation: those supplied are not reliable and Revtex complains if they are present and not used
   # print FILE "\\keywords{", $keywords, "}"; # keywords for aps, keyword for PLB
   print FILE $substring[1];
   close(FILE);

}
##############################################################################
#
# PLB (Elsevier) post-processor
#
sub makePLB{
   my $infile = shift;
   my $outfile = shift;
   my $style = shift;
   if ($style eq '-') {$style = "3p,twocolumn,times";} #default style

   &replacePdfAuthor($infile, 1);

   my $preface = <<EOD;
\\documentclass[numbers,sort&compress,$style]{elsarticle}
\\usepackage{amsmath,amssymb}
\\usepackage{xspace}
\\usepackage[bookmarksnumbered,bookmarksopen,bookmarksopenlevel=1,colorlinks=false,plainpages=false,pdfpagelabels]{hyperref}
\\usepackage{graphicx,graphics}
\\usepackage{array}
\\usepackage{ifthen}
\\usepackage{multirow}
\\usepackage{lineno}
\\usepackage{rotating}
\\usepackage{topcapt}
\\usepackage{dcolumn}
\\usepackage[caption=false]{subfig}
\\usepackage{fixltx2e}
%\\usepackage{placeins}
\\DeclareMathOperator{\\sign}{sign}% for those who insist on sign instead
\\DeclareMathOperator{\\sgn}{sgn}% Declare the sgn operator
\\DeclareMathOperator{\\erf}{erf} % and the erf operator
\\DeclareMathOperator{\\cov}{cov}
\\DeclareGraphicsExtensions{.pdf,.PDF,.png,.PNG}
\\let\\subfigure\\subfloat % subfigure subfig compatibility
% to allow external commands, embed in an ifthen testing on cms@external
\\newboolean{cms\@external}
\\setboolean{cms\@external}{true}
% to not use italic particle names
\\newboolean{cms\@italic}
\\setboolean{cms\@italic}{false}
\\usepackage{pennames}
\\usepackage{ptdr-definitions}
\\providecommand{\\cmsNoteHeader}[1]{\\relax}
\\providecommand{\\cmsNoteContact}[1]{\\relax}
% authorlist formatting; cmsAuthorMark matches use in endnotes
\\newcommand{\\cmsAuthorMark}[1]{\\hbox{\\\@textsuperscript{\\normalfont#1}}}
\\newskip{\\cmsinstskip} \\cmsinstskip=0pt plus 4pt
\\newskip{\\cmsauthskip} \\cmsauthskip=16pt
\\renewcommand{\\ETslash}{\\ensuremath{E_{\\mathrm{T}}\\hspace{-0.95em}/\\kern0.5em}\\xspace}
\\renewcommand{\\Em}{\\ensuremath{E\\hspace{-0.45em}/}\\xspace}
\\providecommand{\\DOI}[1]{\\href{http://dx.doi.org/#1}{\\doi{#1}}}
\\newenvironment{acknowledgments}{\\section*{Acknowledgments}}{\\par}
\\renewcommand{\\bibname}{References}
\\providecommand\\bibsection{\\section*{\\bibname}}
EOD

   my $preface2 = <<EOD;
\\makeatletter
\\let\\OldGinclude\@graphics\\Ginclude\@graphics\\renewcommand{\\Ginclude\@graphics}[1]{\\typeout{<789FIG #1 \\thefigure>}\\OldGinclude\@graphics{#1}}%
\\let\\OldCMS\@input\\InputIfFileExists\\long\\def\\InputIfFileExists#1#2#3{{\\typeout{<567INP #1>}}{}\\OldCMS\@input{#1}{#2}{#3}}%
\\makeatother
EOD

   if ($infile eq $outfile) { $preface .= $preface2; }

   open(FILE, $infile) || die("can't open TeX file $file: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);

   # remove all the RCS information
   s/^\\RCS\$.*?$//mg;

    # remove any author/address and replace with standard paper values later
    s/\\address.*?\}//sg;
    s/\\author.*?\}//sg;

   #replace doc class
   s/\\documentclass\[.*?\]\{.*?\}/$preface/sg;

   # get ready to re-write
   open(FILE, "> $outfile") || die("can't open file $file: $! for write");

   # find the abstract
   m/(.*?)\\abstract(\{.*)/s;
   print FILE $1, "\\address[cern]{CERN}\\author[cern]{The CMS Collaboration}\\ead{cms-publication-committee-chair\@cern.ch}","\\begin{abstract}";

   my @substring = extract_bracketed("abstract".$2,"{}","abstract");
   #strip off enclosing {}
   $substring[0] =~ m/\{(.*)\}/s;
   print FILE $1;
   $substring[1] =~ s/\\bibliography\{auto_generated\}/\\bibliographystyle\{elsarticle-num-names\}\\bibliography\{auto_generated\}/s;
   print FILE "\\end{abstract}\n";
   #extract keywords
   m/pdfkeywords\s*=\s*\{(.*?)\}/s;
   my $keywords = $1;
   $keywords =~ s/,/\\sep/sg;

   print FILE "\\begin{keyword}", $keywords, "\\end{keyword}"; # keywords for aps, keyword for PLB
   print FILE $substring[1];
   close(FILE);

}
##############################################################################
#
# EPJC (Europhysics C) post-processor
#
sub makeEPJC{
   my $infile = shift;
   my $outfile = shift;
   my $style = shift;
   if ($style eq '-') {$style = "twocolumn";} #default style

   &replacePdfAuthor($infile, 1);

# older EPJC style class
#\\documentclass[epj,nopacs,$style]{svjour}
# newer EPJC style class
#\\documentclass[twocolumn,epjc3]{svjour3}
   my $preface = <<EOD;
\\documentclass[epj,nopacs,$style]{svjour}
\\journalname{European Physical Journal C}
\\usepackage{amsmath,amssymb}
\\usepackage{xspace}
\\usepackage[bookmarksnumbered,bookmarksopen,bookmarksopenlevel=1,colorlinks=false,plainpages=false,pdfpagelabels]{hyperref}
\\usepackage[numbers,sort&compress,merge]{natbib}
%\\usepackage[table,usenames,dvipsnames]{xcolor}% just for warnings so far; do not use for journal submission without prior approval

 % from svepjc3.clo
 % Still using CMS bibstyle until live DOI links
% \\setlength{\\bibhang}{\\parindent}%
% \\let\\bibfont=\\small%
% \\providecommand{\\doi}{DOI \\discretionary{}{}{}\\begingroup \\urlstyle{rm}\\Url}
% doesn't work in situ with natbib, instead producing "! Package natbib Error: Bibliography not compatible with author-year citations.", probably due to the default "a" (author) argument to \\bibpunct, here replaced with "n" (numeric)
% \\bibpunct{(}{)}{;}{n}{}{,}

\\usepackage{graphicx,graphics}
\\usepackage{array}
\\usepackage{ifthen}
\\usepackage{multirow}
\\usepackage{lineno}
\\usepackage{dcolumn}
\\usepackage{topcapt}
\\usepackage{rotating}
\\usepackage[caption=false]{subfig}
\\usepackage{fixltx2e}
%\\usepackage[verbose]{placeins}
% to allow external commands, embed in an ifthen testing on cms@external
\\newboolean{cms\@external}
\\setboolean{cms\@external}{true}
% to not use italic particle names
\\newboolean{cms\@italic}
\\setboolean{cms\@italic}{false}
\\usepackage{pennames}
\\usepackage{ptdr-definitions}
\\renewcommand{\\ETslash}{\\ensuremath{E_{\\cmsSymbolFace{T}}\\hspace{-1.2em}/\\kern0.6em}\\xspace}
\\renewcommand{\\PTm}{\\ensuremath{{p}_\\mathrm{T}\\hspace{-1.2em}/\\kern 0.7em}\\xspace}
\\let\\subfigure\\subfloat % subfigure subfig compatibility
\\DeclareMathOperator{\\sign}{sign}% for those who insist on sign instead
\\DeclareMathOperator{\\cov}{cov}
\\providecommand{\\cmsNoteHeader}[1]{\\relax}
\\providecommand{\\cmsNoteContact}[1]{\\relax}
% authorlist formatting; cmsAuthorMark matches use in endnotes
\\newcommand{\\cmsAuthorMark}[1]{\\hbox{\\\@textsuperscript{\\normalfont#1}}}
\\newskip{\\cmsinstskip} \\cmsinstskip=0pt plus 4pt
\\newskip{\\cmsauthskip} \\cmsauthskip=16pt
\\DeclareMathOperator{\\sgn}{sgn}% Declare the sgn operator
\\DeclareMathOperator{\\erf}{erf} % and the erf operator
\\DeclareGraphicsExtensions{.pdf,.PDF,.png,.PNG}
\\providecommand{\\DOI}[1]{\\href{http://dx.doi.org/#1}{\\doi{#1}}}
\\newenvironment{acknowledgments}{\\section*{Acknowledgments}\\bgroup\\tolerance=1200}{\\par\\egroup}
EOD

   my $preface2 = <<EOD;
\\makeatletter
\\let\\OldGinclude\@graphics\\Ginclude\@graphics\\renewcommand{\\Ginclude\@graphics}[1]{\\typeout{<789FIG #1 \\thefigure>}\\OldGinclude\@graphics{#1}}%
\\let\\OldCMS\@input\\InputIfFileExists\\long\\def\\InputIfFileExists#1#2#3{{\\typeout{<567INP #1>}}{}\\OldCMS\@input{#1}{#2}{#3}}%
\\makeatother
EOD

   if ($infile eq $outfile) { $preface .= $preface2; }

   open(FILE, $infile) || die("can't open TeX file $file: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);

   # remove all the RCS information
   s/^\\RCS\$.*?$//mg;

    # remove any author/address and replace with standard paper values later
    s/\\address.*?\}//sg;
    s/\\author(?!running).*?\}//sg; # retaining the EPJC-only \authorrunning command

   #replace doc class
   s/\\documentclass\[.*?\]\{.*?\}/$preface/sg;

   # get ready to re-write
   open(FILE, "> $outfile") || die("can't open file $file: $! for write");

   # find the abstract
   m/(.*?)\\abstract(\{.*)/s;
   print FILE $1, "\\institute{CERN}\\author{The CMS Collaboration}\\email{cms-publication-committee-chair\@cern.ch}\\authorrunning{CMS}","\\abstract{";

   my @substring = extract_bracketed("abstract".$2,"{}","abstract");
   #strip off enclosing {}
   $substring[0] =~ m/\{(.*)\}/s;
   print FILE $1;
   # do not use EPJC-specific bib style, as EPJC bib style does not support links for DOIs
   #$substring[1] =~ s/\\bibliography\{auto_generated\}/\\bibliographystyle\{spphys\}\\bibliography\{auto_generated\}/s;
   $substring[1] =~ s/\\bibliography\{auto_generated\}/\\bibliographystyle\{auto_generated\}\\bibliography\{auto_generated\}/s;
   print FILE "}\n";
   #extract keywords
   m/pdfkeywords\s*=\s*\{(.*?)\}/s;
   my $keywords = $1;

   print FILE "\\keywords{", $keywords, "}"; # keywords for aps/epjc, keyword for PLB
   print FILE $substring[1];
   close(FILE);

}
##############################################################################
#
# JHEP post-processor
#
sub makeJHEP{
   my $infile = shift;
   my $outfile = shift;
   my $style = shift;

   my $preface = <<EOD;
\\setboolean{cms\@external}{true}
EOD

   open(FILE, $infile) || die("can't open TeX file $file: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);

   # find the cmsNoteHeader and add our additional defs for JHEP
   my $rep = qr/\\begin\{document\}\K.*?(?=\\cmsNoteHeader)/; # zero-length look behind; anything (even nothing); zero-length look forward. /x : allow spaces
   s/$rep/$preface/x;
   # remove all the RCS information, replace with external flag
   s/^\\RCS\$.*?$//mg;

   # get ready to re-write
   open(FILE, "> $outfile") || die("can't open file $file: $! for write");

   print FILE;
   close FILE;
}
##############################################################################
#
# NPAHA (Nature Physics post-processor
#
sub makeNPAHA{
   my $infile = shift;
   my $outfile = shift;
   my $style = shift;

   my $preface = <<EOD;
\\setboolean{cms\@external}{true}
EOD

   open(FILE, $infile) || die("can't open TeX file $file: $! for read");
   $_ = ''; $_ .= do { local( $/ ); <FILE> }; #grab entire content!
   close(FILE);

   # find the cmsNoteHeader and add our additional defs for Nature
   my $rep = qr/\\begin\{document\}\K.*?(?=\\cmsNoteHeader)/; # zero-length look behind; anything (even nothing); zero-length look forward. /x : allow spaces
   s/$rep/$preface/x;
   # remove all the RCS information, replace with external flag
   s/^\\RCS\$.*?$//mg;

   # get ready to re-write
   open(FILE, "> $outfile") || die("can't open file $file: $! for write");

   print FILE;
   close FILE;
}
##############################################################################
#
# to rewrite the bib file
#
sub rewriteBib
{
       my $tmp_dir = shift;
       my $tag = shift;
       my $noArXiv = shift;
       my $arXivFlag = '';
       if ($noArXiv) {$arXivFlag = "--no-arxiv"};
       my $py_version = `python -V 2>&1`;
       if ( `python -V 2>&1` =~ m/([23])\.([0-9])\.?([0-9])?/ && ($1 > 2 || ($1 == 2 && (($2 == 6 && $3 >= 4) || $2 > 6 ))))
       {
            my $baseArg = "--base=".$tmp_dir;
            my $cleanCommand =$gen_dir."/cleanRefs.py";
            $cleanCommand =~ s#/#\\#g if $^O eq "MSWin32";
            my $status = system("python", $cleanCommand, $baseArg, "--rewrite", "--verbosity", $arXivFlag, $tag);
       }
       else
       {
           print ">> tdr needs Python 2.6.4 or better to analyze the references\n";
       }
}
